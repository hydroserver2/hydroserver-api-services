# Generated by Django 5.2a1 on 2025-02-10 21:25

import django.db.models.deletion
import iam.models.utils
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('iam', '0007_rename_private_workspace_is_private'),
        ('sta', '0002_location_workspace'),
    ]

    operations = [
        migrations.CreateModel(
            name='ObservedProperty',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('definition', models.TextField()),
                ('description', models.TextField()),
                ('observed_property_type', models.CharField(max_length=500)),
                ('code', models.CharField(max_length=500)),
                ('workspace', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='observed_properties', to='iam.workspace')),
            ],
            bases=(models.Model, iam.models.utils.PermissionChecker),
        ),
        migrations.CreateModel(
            name='ProcessingLevel',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('code', models.CharField(max_length=255)),
                ('definition', models.TextField(blank=True, null=True)),
                ('explanation', models.TextField(blank=True, null=True)),
                ('workspace', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='processing_levels', to='iam.workspace')),
            ],
            bases=(models.Model, iam.models.utils.PermissionChecker),
        ),
        migrations.CreateModel(
            name='ResultQualifier',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('code', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('workspace', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='result_qualifiers', to='iam.workspace')),
            ],
            bases=(models.Model, iam.models.utils.PermissionChecker),
        ),
        migrations.CreateModel(
            name='Sensor',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('encoding_type', models.CharField(max_length=255)),
                ('manufacturer', models.CharField(blank=True, max_length=255, null=True)),
                ('sensor_model', models.CharField(blank=True, max_length=255, null=True)),
                ('sensor_model_link', models.CharField(blank=True, max_length=500, null=True)),
                ('method_type', models.CharField(max_length=100)),
                ('method_link', models.CharField(blank=True, max_length=500, null=True)),
                ('method_code', models.CharField(blank=True, max_length=50, null=True)),
                ('workspace', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sensors', to='iam.workspace')),
            ],
            bases=(models.Model, iam.models.utils.PermissionChecker),
        ),
        migrations.CreateModel(
            name='Unit',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('symbol', models.CharField(max_length=255)),
                ('definition', models.TextField()),
                ('unit_type', models.CharField(max_length=255)),
                ('workspace', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='units', to='iam.workspace')),
            ],
            bases=(models.Model, iam.models.utils.PermissionChecker),
        ),
    ]
